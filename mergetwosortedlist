/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
        
        ListNode head = new ListNode(-1);
        ListNode l3 = head;
        
        while(l1 != null && l2 !=null){
            if(l1.val < l2.val){
                l3.next = l1;
                l3 = l3.next;
                l1 = l1.next;
            }
            else{
                l3.next = l2;
                l3 = l3.next;
                l2 = l2.next;
            }
        }
        
        if(l1 != null){
            l3.next = l1;
        }
        if(l2 != null){
            l3.next = l2;
        }
        
        return head.next;
        
        
        
        /*
        if(l1 == null){ //boundary 
            return l2;
        }
        if(l2 == null){
            return l1;
        }
        
        ListNode l3;//new listnode
        if(l1.val < l2.val){
            l3 = l1;
            l1 = l1.next;
        }
        else{
            l3 = l2;
            l2 = l2.next;
        }
        
        ListNode head = new ListNode(-1);//這個新的head跟上面l3為什麼宣告方式不一樣？為什麼開始是-1? -1是什麼意思？
        head.next = l3;
        
        while(l1 != null && l2 != null){
            if(l1.val < l2.val){
                l3.next = l1;
                l3 = l3.next;
                l1 = l1.next;
            }
            else{
                l3.next = l2;
                l3 = l3.next;
                l2 = l2.next;
            }
        }
        
        if(l1 ! = null) {
            l3.next = l1;
        }
        
        if(l2 != null){
            l3.next = l2;
        }
        
        return head.next;
    */
    }
}
